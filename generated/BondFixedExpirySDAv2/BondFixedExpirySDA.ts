// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap} from "@graphprotocol/graph-ts";

export class AuthorityUpdated extends ethereum.Event {
  get params(): AuthorityUpdated__Params {
    return new AuthorityUpdated__Params(this);
  }
}

export class AuthorityUpdated__Params {
  _event: AuthorityUpdated;

  constructor(event: AuthorityUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAuthority(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MarketClosed extends ethereum.Event {
  get params(): MarketClosed__Params {
    return new MarketClosed__Params(this);
  }
}

export class MarketClosed__Params {
  _event: MarketClosed;

  constructor(event: MarketClosed) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MarketCreated extends ethereum.Event {
  get params(): MarketCreated__Params {
    return new MarketCreated__Params(this);
  }
}

export class MarketCreated__Params {
  _event: MarketCreated;

  constructor(event: MarketCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get payoutToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get quoteToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get vesting(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get initialPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Tuned extends ethereum.Event {
  get params(): Tuned__Params {
    return new Tuned__Params(this);
  }
}

export class Tuned__Params {
  _event: Tuned;

  constructor(event: Tuned) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldControlVariable(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newControlVariable(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BondFixedExpirySDA__adjustmentsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getChange(): BigInt {
    return this.value0;
  }

  getLastAdjustment(): BigInt {
    return this.value1;
  }

  getTimeToAdjusted(): BigInt {
    return this.value2;
  }

  getActive(): boolean {
    return this.value3;
  }
}

export class BondFixedExpirySDA__getMarketInfoForPurchaseResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getCallbackAddr(): Address {
    return this.value1;
  }

  getPayoutToken(): Address {
    return this.value2;
  }

  getQuoteToken(): Address {
    return this.value3;
  }

  getVesting(): BigInt {
    return this.value4;
  }

  getMaxPayout(): BigInt {
    return this.value5;
  }
}

export class BondFixedExpirySDA__marketsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: boolean;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: boolean,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getPayoutToken(): Address {
    return this.value1;
  }

  getQuoteToken(): Address {
    return this.value2;
  }

  getCallbackAddr(): Address {
    return this.value3;
  }

  getCapacityInQuote(): boolean {
    return this.value4;
  }

  getCapacity(): BigInt {
    return this.value5;
  }

  getTotalDebt(): BigInt {
    return this.value6;
  }

  getMinPrice(): BigInt {
    return this.value7;
  }

  getMaxPayout(): BigInt {
    return this.value8;
  }

  getSold(): BigInt {
    return this.value9;
  }

  getPurchased(): BigInt {
    return this.value10;
  }

  getScale(): BigInt {
    return this.value11;
  }
}

export class BondFixedExpirySDA__metadataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }

  getLastTune(): BigInt {
    return this.value0;
  }

  getLastDecay(): BigInt {
    return this.value1;
  }

  getLength(): BigInt {
    return this.value2;
  }

  getDepositInterval(): BigInt {
    return this.value3;
  }

  getTuneInterval(): BigInt {
    return this.value4;
  }

  getTuneAdjustmentDelay(): BigInt {
    return this.value5;
  }

  getDebtDecayInterval(): BigInt {
    return this.value6;
  }

  getTuneIntervalCapacity(): BigInt {
    return this.value7;
  }

  getTuneBelowCapacity(): BigInt {
    return this.value8;
  }

  getLastTuneDebt(): BigInt {
    return this.value9;
  }
}

export class BondFixedExpirySDA__termsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getControlVariable(): BigInt {
    return this.value0;
  }

  getMaxDebt(): BigInt {
    return this.value1;
  }

  getVesting(): BigInt {
    return this.value2;
  }

  getConclusion(): BigInt {
    return this.value3;
  }
}

export class BondFixedExpirySDA extends ethereum.SmartContract {
  static bind(address: Address): BondFixedExpirySDA {
    return new BondFixedExpirySDA("BondFixedExpirySDA", address);
  }

  adjustments(param0: BigInt): BondFixedExpirySDA__adjustmentsResult {
    const result = super.call(
      "adjustments",
      "adjustments(uint256):(uint256,uint48,uint48,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BondFixedExpirySDA__adjustmentsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_adjustments(
    param0: BigInt
  ): ethereum.CallResult<BondFixedExpirySDA__adjustmentsResult> {
    const result = super.tryCall(
      "adjustments",
      "adjustments(uint256):(uint256,uint48,uint48,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new BondFixedExpirySDA__adjustmentsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  allowNewMarkets(): boolean {
    const result = super.call("allowNewMarkets", "allowNewMarkets():(bool)", []);

    return result[0].toBoolean();
  }

  try_allowNewMarkets(): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "allowNewMarkets",
      "allowNewMarkets():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  authority(): Address {
    const result = super.call("authority", "authority():(address)", []);

    return result[0].toAddress();
  }

  try_authority(): ethereum.CallResult<Address> {
    const result = super.tryCall("authority", "authority():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  callbackAuthorized(param0: Address): boolean {
    const result = super.call(
      "callbackAuthorized",
      "callbackAuthorized(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_callbackAuthorized(param0: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "callbackAuthorized",
      "callbackAuthorized(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createMarket(params_: Bytes): BigInt {
    const result = super.call("createMarket", "createMarket(bytes):(uint256)", [
      ethereum.Value.fromBytes(params_)
    ]);

    return result[0].toBigInt();
  }

  try_createMarket(params_: Bytes): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "createMarket",
      "createMarket(bytes):(uint256)",
      [ethereum.Value.fromBytes(params_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentCapacity(id_: BigInt): BigInt {
    const result = super.call(
      "currentCapacity",
      "currentCapacity(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id_)]
    );

    return result[0].toBigInt();
  }

  try_currentCapacity(id_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "currentCapacity",
      "currentCapacity(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentControlVariable(id_: BigInt): BigInt {
    const result = super.call(
      "currentControlVariable",
      "currentControlVariable(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id_)]
    );

    return result[0].toBigInt();
  }

  try_currentControlVariable(id_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "currentControlVariable",
      "currentControlVariable(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentDebt(id_: BigInt): BigInt {
    const result = super.call("currentDebt", "currentDebt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id_)
    ]);

    return result[0].toBigInt();
  }

  try_currentDebt(id_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "currentDebt",
      "currentDebt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defaultTuneAdjustment(): BigInt {
    const result = super.call(
      "defaultTuneAdjustment",
      "defaultTuneAdjustment():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_defaultTuneAdjustment(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "defaultTuneAdjustment",
      "defaultTuneAdjustment():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defaultTuneInterval(): BigInt {
    const result = super.call(
      "defaultTuneInterval",
      "defaultTuneInterval():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_defaultTuneInterval(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "defaultTuneInterval",
      "defaultTuneInterval():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAggregator(): Address {
    const result = super.call("getAggregator", "getAggregator():(address)", []);

    return result[0].toAddress();
  }

  try_getAggregator(): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "getAggregator",
      "getAggregator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMarketInfoForPurchase(
    id_: BigInt
  ): BondFixedExpirySDA__getMarketInfoForPurchaseResult {
    const result = super.call(
      "getMarketInfoForPurchase",
      "getMarketInfoForPurchase(uint256):(address,address,address,address,uint48,uint256)",
      [ethereum.Value.fromUnsignedBigInt(id_)]
    );

    return new BondFixedExpirySDA__getMarketInfoForPurchaseResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getMarketInfoForPurchase(
    id_: BigInt
  ): ethereum.CallResult<BondFixedExpirySDA__getMarketInfoForPurchaseResult> {
    const result = super.tryCall(
      "getMarketInfoForPurchase",
      "getMarketInfoForPurchase(uint256):(address,address,address,address,uint48,uint256)",
      [ethereum.Value.fromUnsignedBigInt(id_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new BondFixedExpirySDA__getMarketInfoForPurchaseResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  getTeller(): Address {
    const result = super.call("getTeller", "getTeller():(address)", []);

    return result[0].toAddress();
  }

  try_getTeller(): ethereum.CallResult<Address> {
    const result = super.tryCall("getTeller", "getTeller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isInstantSwap(id_: BigInt): boolean {
    const result = super.call("isInstantSwap", "isInstantSwap(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id_)
    ]);

    return result[0].toBoolean();
  }

  try_isInstantSwap(id_: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "isInstantSwap",
      "isInstantSwap(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(id_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLive(id_: BigInt): boolean {
    const result = super.call("isLive", "isLive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id_)
    ]);

    return result[0].toBoolean();
  }

  try_isLive(id_: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall("isLive", "isLive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marketPrice(id_: BigInt): BigInt {
    const result = super.call("marketPrice", "marketPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id_)
    ]);

    return result[0].toBigInt();
  }

  try_marketPrice(id_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "marketPrice",
      "marketPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketScale(id_: BigInt): BigInt {
    const result = super.call("marketScale", "marketScale(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id_)
    ]);

    return result[0].toBigInt();
  }

  try_marketScale(id_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "marketScale",
      "marketScale(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  markets(param0: BigInt): BondFixedExpirySDA__marketsResult {
    const result = super.call(
      "markets",
      "markets(uint256):(address,address,address,address,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BondFixedExpirySDA__marketsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt()
    );
  }

  try_markets(
    param0: BigInt
  ): ethereum.CallResult<BondFixedExpirySDA__marketsResult> {
    const result = super.tryCall(
      "markets",
      "markets(uint256):(address,address,address,address,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new BondFixedExpirySDA__marketsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt()
      )
    );
  }

  maxAmountAccepted(id_: BigInt, referrer_: Address): BigInt {
    const result = super.call(
      "maxAmountAccepted",
      "maxAmountAccepted(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(id_),
        ethereum.Value.fromAddress(referrer_)
      ]
    );

    return result[0].toBigInt();
  }

  try_maxAmountAccepted(
    id_: BigInt,
    referrer_: Address
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "maxAmountAccepted",
      "maxAmountAccepted(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(id_),
        ethereum.Value.fromAddress(referrer_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  metadata(param0: BigInt): BondFixedExpirySDA__metadataResult {
    const result = super.call(
      "metadata",
      "metadata(uint256):(uint48,uint48,uint32,uint32,uint32,uint32,uint32,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BondFixedExpirySDA__metadataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_metadata(
    param0: BigInt
  ): ethereum.CallResult<BondFixedExpirySDA__metadataResult> {
    const result = super.tryCall(
      "metadata",
      "metadata(uint256):(uint48,uint48,uint32,uint32,uint32,uint32,uint32,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new BondFixedExpirySDA__metadataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  minDebtBuffer(): BigInt {
    const result = super.call("minDebtBuffer", "minDebtBuffer():(uint32)", []);

    return result[0].toBigInt();
  }

  try_minDebtBuffer(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("minDebtBuffer", "minDebtBuffer():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minDebtDecayInterval(): BigInt {
    const result = super.call(
      "minDebtDecayInterval",
      "minDebtDecayInterval():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_minDebtDecayInterval(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "minDebtDecayInterval",
      "minDebtDecayInterval():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minDepositInterval(): BigInt {
    const result = super.call(
      "minDepositInterval",
      "minDepositInterval():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_minDepositInterval(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "minDepositInterval",
      "minDepositInterval():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minMarketDuration(): BigInt {
    const result = super.call(
      "minMarketDuration",
      "minMarketDuration():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_minMarketDuration(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "minMarketDuration",
      "minMarketDuration():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  newOwners(param0: BigInt): Address {
    const result = super.call("newOwners", "newOwners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_newOwners(param0: BigInt): ethereum.CallResult<Address> {
    const result = super.tryCall("newOwners", "newOwners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    const result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    const result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(id_: BigInt): Address {
    const result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id_)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(id_: BigInt): ethereum.CallResult<Address> {
    const result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  payoutFor(amount_: BigInt, id_: BigInt, referrer_: Address): BigInt {
    const result = super.call(
      "payoutFor",
      "payoutFor(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromUnsignedBigInt(id_),
        ethereum.Value.fromAddress(referrer_)
      ]
    );

    return result[0].toBigInt();
  }

  try_payoutFor(
    amount_: BigInt,
    id_: BigInt,
    referrer_: Address
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "payoutFor",
      "payoutFor(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromUnsignedBigInt(id_),
        ethereum.Value.fromAddress(referrer_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  purchaseBond(id_: BigInt, amount_: BigInt, minAmountOut_: BigInt): BigInt {
    const result = super.call(
      "purchaseBond",
      "purchaseBond(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(id_),
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromUnsignedBigInt(minAmountOut_)
      ]
    );

    return result[0].toBigInt();
  }

  try_purchaseBond(
    id_: BigInt,
    amount_: BigInt,
    minAmountOut_: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "purchaseBond",
      "purchaseBond(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(id_),
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromUnsignedBigInt(minAmountOut_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  terms(param0: BigInt): BondFixedExpirySDA__termsResult {
    const result = super.call(
      "terms",
      "terms(uint256):(uint256,uint256,uint48,uint48)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BondFixedExpirySDA__termsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_terms(
    param0: BigInt
  ): ethereum.CallResult<BondFixedExpirySDA__termsResult> {
    const result = super.tryCall(
      "terms",
      "terms(uint256):(uint256,uint256,uint48,uint48)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new BondFixedExpirySDA__termsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get teller_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get aggregator_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get guardian_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get authority_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloseMarketCall extends ethereum.Call {
  get inputs(): CloseMarketCall__Inputs {
    return new CloseMarketCall__Inputs(this);
  }

  get outputs(): CloseMarketCall__Outputs {
    return new CloseMarketCall__Outputs(this);
  }
}

export class CloseMarketCall__Inputs {
  _call: CloseMarketCall;

  constructor(call: CloseMarketCall) {
    this._call = call;
  }

  get id_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseMarketCall__Outputs {
  _call: CloseMarketCall;

  constructor(call: CloseMarketCall) {
    this._call = call;
  }
}

export class CreateMarketCall extends ethereum.Call {
  get inputs(): CreateMarketCall__Inputs {
    return new CreateMarketCall__Inputs(this);
  }

  get outputs(): CreateMarketCall__Outputs {
    return new CreateMarketCall__Outputs(this);
  }
}

export class CreateMarketCall__Inputs {
  _call: CreateMarketCall;

  constructor(call: CreateMarketCall) {
    this._call = call;
  }

  get params_(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CreateMarketCall__Outputs {
  _call: CreateMarketCall;

  constructor(call: CreateMarketCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PullOwnershipCall extends ethereum.Call {
  get inputs(): PullOwnershipCall__Inputs {
    return new PullOwnershipCall__Inputs(this);
  }

  get outputs(): PullOwnershipCall__Outputs {
    return new PullOwnershipCall__Outputs(this);
  }
}

export class PullOwnershipCall__Inputs {
  _call: PullOwnershipCall;

  constructor(call: PullOwnershipCall) {
    this._call = call;
  }

  get id_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PullOwnershipCall__Outputs {
  _call: PullOwnershipCall;

  constructor(call: PullOwnershipCall) {
    this._call = call;
  }
}

export class PurchaseBondCall extends ethereum.Call {
  get inputs(): PurchaseBondCall__Inputs {
    return new PurchaseBondCall__Inputs(this);
  }

  get outputs(): PurchaseBondCall__Outputs {
    return new PurchaseBondCall__Outputs(this);
  }
}

export class PurchaseBondCall__Inputs {
  _call: PurchaseBondCall;

  constructor(call: PurchaseBondCall) {
    this._call = call;
  }

  get id_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmountOut_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PurchaseBondCall__Outputs {
  _call: PurchaseBondCall;

  constructor(call: PurchaseBondCall) {
    this._call = call;
  }

  get payout(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PushOwnershipCall extends ethereum.Call {
  get inputs(): PushOwnershipCall__Inputs {
    return new PushOwnershipCall__Inputs(this);
  }

  get outputs(): PushOwnershipCall__Outputs {
    return new PushOwnershipCall__Outputs(this);
  }
}

export class PushOwnershipCall__Inputs {
  _call: PushOwnershipCall;

  constructor(call: PushOwnershipCall) {
    this._call = call;
  }

  get id_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newOwner_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class PushOwnershipCall__Outputs {
  _call: PushOwnershipCall;

  constructor(call: PushOwnershipCall) {
    this._call = call;
  }
}

export class SetAllowNewMarketsCall extends ethereum.Call {
  get inputs(): SetAllowNewMarketsCall__Inputs {
    return new SetAllowNewMarketsCall__Inputs(this);
  }

  get outputs(): SetAllowNewMarketsCall__Outputs {
    return new SetAllowNewMarketsCall__Outputs(this);
  }
}

export class SetAllowNewMarketsCall__Inputs {
  _call: SetAllowNewMarketsCall;

  constructor(call: SetAllowNewMarketsCall) {
    this._call = call;
  }

  get status_(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetAllowNewMarketsCall__Outputs {
  _call: SetAllowNewMarketsCall;

  constructor(call: SetAllowNewMarketsCall) {
    this._call = call;
  }
}

export class SetAuthorityCall extends ethereum.Call {
  get inputs(): SetAuthorityCall__Inputs {
    return new SetAuthorityCall__Inputs(this);
  }

  get outputs(): SetAuthorityCall__Outputs {
    return new SetAuthorityCall__Outputs(this);
  }
}

export class SetAuthorityCall__Inputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }

  get newAuthority(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAuthorityCall__Outputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }
}

export class SetCallbackAuthStatusCall extends ethereum.Call {
  get inputs(): SetCallbackAuthStatusCall__Inputs {
    return new SetCallbackAuthStatusCall__Inputs(this);
  }

  get outputs(): SetCallbackAuthStatusCall__Outputs {
    return new SetCallbackAuthStatusCall__Outputs(this);
  }
}

export class SetCallbackAuthStatusCall__Inputs {
  _call: SetCallbackAuthStatusCall;

  constructor(call: SetCallbackAuthStatusCall) {
    this._call = call;
  }

  get creator_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status_(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetCallbackAuthStatusCall__Outputs {
  _call: SetCallbackAuthStatusCall;

  constructor(call: SetCallbackAuthStatusCall) {
    this._call = call;
  }
}

export class SetDefaultsCall extends ethereum.Call {
  get inputs(): SetDefaultsCall__Inputs {
    return new SetDefaultsCall__Inputs(this);
  }

  get outputs(): SetDefaultsCall__Outputs {
    return new SetDefaultsCall__Outputs(this);
  }
}

export class SetDefaultsCall__Inputs {
  _call: SetDefaultsCall;

  constructor(call: SetDefaultsCall) {
    this._call = call;
  }

  get defaults_(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetDefaultsCall__Outputs {
  _call: SetDefaultsCall;

  constructor(call: SetDefaultsCall) {
    this._call = call;
  }
}

export class SetIntervalsCall extends ethereum.Call {
  get inputs(): SetIntervalsCall__Inputs {
    return new SetIntervalsCall__Inputs(this);
  }

  get outputs(): SetIntervalsCall__Outputs {
    return new SetIntervalsCall__Outputs(this);
  }
}

export class SetIntervalsCall__Inputs {
  _call: SetIntervalsCall;

  constructor(call: SetIntervalsCall) {
    this._call = call;
  }

  get id_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get intervals_(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetIntervalsCall__Outputs {
  _call: SetIntervalsCall;

  constructor(call: SetIntervalsCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}
