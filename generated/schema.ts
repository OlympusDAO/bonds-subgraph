// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  BigDecimal,
  BigInt,
  Bytes,
  Entity,
  store,
  TypedMap,
  Value,
  ValueKind} from "@graphprotocol/graph-ts";

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save Market entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Market must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Market", id.toString(), this);
    }
  }

  static load(id: string): Market | null {
    return changetype<Market | null>(store.get("Market", id));
  }

  get id(): string {
    const value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marketId(): BigInt {
    const value = this.get("marketId");
    return value!.toBigInt();
  }

  set marketId(value: BigInt) {
    this.set("marketId", Value.fromBigInt(value));
  }

  get bondContract(): Bytes {
    const value = this.get("bondContract");
    return value!.toBytes();
  }

  set bondContract(value: Bytes) {
    this.set("bondContract", Value.fromBytes(value));
  }

  get bondType(): string {
    const value = this.get("bondType");
    return value!.toString();
  }

  set bondType(value: string) {
    this.set("bondType", Value.fromString(value));
  }

  get owner(): Bytes {
    const value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get payoutToken(): Bytes {
    const value = this.get("payoutToken");
    return value!.toBytes();
  }

  set payoutToken(value: Bytes) {
    this.set("payoutToken", Value.fromBytes(value));
  }

  get quoteToken(): Bytes {
    const value = this.get("quoteToken");
    return value!.toBytes();
  }

  set quoteToken(value: Bytes) {
    this.set("quoteToken", Value.fromBytes(value));
  }

  get vesting(): BigInt {
    const value = this.get("vesting");
    return value!.toBigInt();
  }

  set vesting(value: BigInt) {
    this.set("vesting", Value.fromBigInt(value));
  }

  get durationMilliseconds(): BigInt {
    const value = this.get("durationMilliseconds");
    return value!.toBigInt();
  }

  set durationMilliseconds(value: BigInt) {
    this.set("durationMilliseconds", Value.fromBigInt(value));
  }

  get durationActualMilliseconds(): BigInt | null {
    const value = this.get("durationActualMilliseconds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set durationActualMilliseconds(value: BigInt | null) {
    if (!value) {
      this.unset("durationActualMilliseconds");
    } else {
      this.set("durationActualMilliseconds", Value.fromBigInt(<BigInt>value));
    }
  }

  get capacityInPayoutToken(): BigDecimal {
    const value = this.get("capacityInPayoutToken");
    return value!.toBigDecimal();
  }

  set capacityInPayoutToken(value: BigDecimal) {
    this.set("capacityInPayoutToken", Value.fromBigDecimal(value));
  }

  get totalDebtInPayoutToken(): BigDecimal {
    const value = this.get("totalDebtInPayoutToken");
    return value!.toBigDecimal();
  }

  set totalDebtInPayoutToken(value: BigDecimal) {
    this.set("totalDebtInPayoutToken", Value.fromBigDecimal(value));
  }

  get maxPayoutInPayoutToken(): BigDecimal {
    const value = this.get("maxPayoutInPayoutToken");
    return value!.toBigDecimal();
  }

  set maxPayoutInPayoutToken(value: BigDecimal) {
    this.set("maxPayoutInPayoutToken", Value.fromBigDecimal(value));
  }

  get initialPriceInQuoteToken(): BigDecimal {
    const value = this.get("initialPriceInQuoteToken");
    return value!.toBigDecimal();
  }

  set initialPriceInQuoteToken(value: BigDecimal) {
    this.set("initialPriceInQuoteToken", Value.fromBigDecimal(value));
  }

  get minPriceInQuoteToken(): BigDecimal {
    const value = this.get("minPriceInQuoteToken");
    return value!.toBigDecimal();
  }

  set minPriceInQuoteToken(value: BigDecimal) {
    this.set("minPriceInQuoteToken", Value.fromBigDecimal(value));
  }

  get soldInPayoutToken(): BigDecimal {
    const value = this.get("soldInPayoutToken");
    return value!.toBigDecimal();
  }

  set soldInPayoutToken(value: BigDecimal) {
    this.set("soldInPayoutToken", Value.fromBigDecimal(value));
  }

  get purchasedInQuoteToken(): BigDecimal {
    const value = this.get("purchasedInQuoteToken");
    return value!.toBigDecimal();
  }

  set purchasedInQuoteToken(value: BigDecimal) {
    this.set("purchasedInQuoteToken", Value.fromBigDecimal(value));
  }

  get createdBlock(): BigInt {
    const value = this.get("createdBlock");
    return value!.toBigInt();
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }

  get createdDate(): string {
    const value = this.get("createdDate");
    return value!.toString();
  }

  set createdDate(value: string) {
    this.set("createdDate", Value.fromString(value));
  }

  get createdTimestamp(): BigInt {
    const value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get closedBlock(): BigInt | null {
    const value = this.get("closedBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closedBlock(value: BigInt | null) {
    if (!value) {
      this.unset("closedBlock");
    } else {
      this.set("closedBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get closedDate(): string | null {
    const value = this.get("closedDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set closedDate(value: string | null) {
    if (!value) {
      this.unset("closedDate");
    } else {
      this.set("closedDate", Value.fromString(<string>value));
    }
  }

  get closedTimestamp(): BigInt | null {
    const value = this.get("closedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closedTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("closedTimestamp");
    } else {
      this.set("closedTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class MarketCreatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save MarketCreatedEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketCreatedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketCreatedEvent", id.toString(), this);
    }
  }

  static load(id: string): MarketCreatedEvent | null {
    return changetype<MarketCreatedEvent | null>(
      store.get("MarketCreatedEvent", id)
    );
  }

  get id(): string {
    const value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marketId(): BigInt {
    const value = this.get("marketId");
    return value!.toBigInt();
  }

  set marketId(value: BigInt) {
    this.set("marketId", Value.fromBigInt(value));
  }

  get bondContract(): Bytes {
    const value = this.get("bondContract");
    return value!.toBytes();
  }

  set bondContract(value: Bytes) {
    this.set("bondContract", Value.fromBytes(value));
  }

  get bondType(): string {
    const value = this.get("bondType");
    return value!.toString();
  }

  set bondType(value: string) {
    this.set("bondType", Value.fromString(value));
  }

  get date(): string {
    const value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get market(): string {
    const value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }
}

export class MarketClosedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save MarketClosedEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketClosedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketClosedEvent", id.toString(), this);
    }
  }

  static load(id: string): MarketClosedEvent | null {
    return changetype<MarketClosedEvent | null>(
      store.get("MarketClosedEvent", id)
    );
  }

  get id(): string {
    const value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marketId(): BigInt {
    const value = this.get("marketId");
    return value!.toBigInt();
  }

  set marketId(value: BigInt) {
    this.set("marketId", Value.fromBigInt(value));
  }

  get bondContract(): Bytes {
    const value = this.get("bondContract");
    return value!.toBytes();
  }

  set bondContract(value: Bytes) {
    this.set("bondContract", Value.fromBytes(value));
  }

  get bondType(): string {
    const value = this.get("bondType");
    return value!.toString();
  }

  set bondType(value: string) {
    this.set("bondType", Value.fromString(value));
  }

  get date(): string {
    const value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get market(): string {
    const value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }
}

export class BondPurchase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save BondPurchase entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BondPurchase must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BondPurchase", id.toString(), this);
    }
  }

  static load(id: string): BondPurchase | null {
    return changetype<BondPurchase | null>(store.get("BondPurchase", id));
  }

  get id(): string {
    const value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    const value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    const value = this.get("transaction");
    return value!.toBytes();
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get contract(): Bytes {
    const value = this.get("contract");
    return value!.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get marketId(): BigInt {
    const value = this.get("marketId");
    return value!.toBigInt();
  }

  set marketId(value: BigInt) {
    this.set("marketId", Value.fromBigInt(value));
  }

  get referrer(): Bytes {
    const value = this.get("referrer");
    return value!.toBytes();
  }

  set referrer(value: Bytes) {
    this.set("referrer", Value.fromBytes(value));
  }

  get amountInQuoteToken(): BigDecimal {
    const value = this.get("amountInQuoteToken");
    return value!.toBigDecimal();
  }

  set amountInQuoteToken(value: BigDecimal) {
    this.set("amountInQuoteToken", Value.fromBigDecimal(value));
  }

  get payoutInPayoutToken(): BigDecimal {
    const value = this.get("payoutInPayoutToken");
    return value!.toBigDecimal();
  }

  set payoutInPayoutToken(value: BigDecimal) {
    this.set("payoutInPayoutToken", Value.fromBigDecimal(value));
  }

  get payoutToken(): Bytes {
    const value = this.get("payoutToken");
    return value!.toBytes();
  }

  set payoutToken(value: Bytes) {
    this.set("payoutToken", Value.fromBytes(value));
  }

  get quoteToken(): Bytes {
    const value = this.get("quoteToken");
    return value!.toBytes();
  }

  set quoteToken(value: Bytes) {
    this.set("quoteToken", Value.fromBytes(value));
  }

  get expiryTimestamp(): BigInt {
    const value = this.get("expiryTimestamp");
    return value!.toBigInt();
  }

  set expiryTimestamp(value: BigInt) {
    this.set("expiryTimestamp", Value.fromBigInt(value));
  }

  get expiryDate(): string {
    const value = this.get("expiryDate");
    return value!.toString();
  }

  set expiryDate(value: string) {
    this.set("expiryDate", Value.fromString(value));
  }
}
